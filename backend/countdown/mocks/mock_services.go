// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/longphung/countdown/countdown/interfaces (interfaces: Services)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/longphung/countdown/countdown/models"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// CreateCountdown mocks base method.
func (m *MockServices) CreateCountdown(arg0 models.Countdown) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountdown", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountdown indicates an expected call of CreateCountdown.
func (mr *MockServicesMockRecorder) CreateCountdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountdown", reflect.TypeOf((*MockServices)(nil).CreateCountdown), arg0)
}

// DeleteCountdown mocks base method.
func (m *MockServices) DeleteCountdown(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCountdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCountdown indicates an expected call of DeleteCountdown.
func (mr *MockServicesMockRecorder) DeleteCountdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCountdown", reflect.TypeOf((*MockServices)(nil).DeleteCountdown), arg0)
}

// GetAllCountdowns mocks base method.
func (m *MockServices) GetAllCountdowns() ([]models.Countdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCountdowns")
	ret0, _ := ret[0].([]models.Countdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCountdowns indicates an expected call of GetAllCountdowns.
func (mr *MockServicesMockRecorder) GetAllCountdowns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCountdowns", reflect.TypeOf((*MockServices)(nil).GetAllCountdowns))
}

// GetCountdown mocks base method.
func (m *MockServices) GetCountdown(arg0 string) (*models.Countdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountdown", arg0)
	ret0, _ := ret[0].(*models.Countdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountdown indicates an expected call of GetCountdown.
func (mr *MockServicesMockRecorder) GetCountdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountdown", reflect.TypeOf((*MockServices)(nil).GetCountdown), arg0)
}

// UpdateCountdown mocks base method.
func (m *MockServices) UpdateCountdown(arg0 string, arg1 models.Countdown) (*models.Countdown, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCountdown", arg0, arg1)
	ret0, _ := ret[0].(*models.Countdown)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCountdown indicates an expected call of UpdateCountdown.
func (mr *MockServicesMockRecorder) UpdateCountdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCountdown", reflect.TypeOf((*MockServices)(nil).UpdateCountdown), arg0, arg1)
}
